/*
 * This file is generated by jOOQ.
 */
package trash.tables.records;


import java.time.LocalDateTime;

import org.jooq.Record1;
import org.jooq.impl.UpdatableRecordImpl;
import org.jooq.types.ULong;

import trash.tables.FacilityImage;


/**
 * 시설물 이미지 테이블
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class FacilityImageRecord extends UpdatableRecordImpl<FacilityImageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>spotfinder.FACILITY_IMAGE.FCLTY_IMG_ID</code>. 이미지 ID
     */
    public FacilityImageRecord setFcltyImgId(ULong value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>spotfinder.FACILITY_IMAGE.FCLTY_IMG_ID</code>. 이미지 ID
     */
    public ULong getFcltyImgId() {
        return (ULong) get(0);
    }

    /**
     * Setter for <code>spotfinder.FACILITY_IMAGE.FCLTY_IMG_PATH</code>. 이미지 경로
     */
    public FacilityImageRecord setFcltyImgPath(String value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>spotfinder.FACILITY_IMAGE.FCLTY_IMG_PATH</code>. 이미지 경로
     */
    public String getFcltyImgPath() {
        return (String) get(1);
    }

    /**
     * Setter for <code>spotfinder.FACILITY_IMAGE.FCLTY_ID</code>. 시설물 ID
     */
    public FacilityImageRecord setFcltyId(ULong value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>spotfinder.FACILITY_IMAGE.FCLTY_ID</code>. 시설물 ID
     */
    public ULong getFcltyId() {
        return (ULong) get(2);
    }

    /**
     * Setter for <code>spotfinder.FACILITY_IMAGE.CRE_DTM</code>. 등록일시
     */
    public FacilityImageRecord setCreDtm(LocalDateTime value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>spotfinder.FACILITY_IMAGE.CRE_DTM</code>. 등록일시
     */
    public LocalDateTime getCreDtm() {
        return (LocalDateTime) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<ULong> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached FacilityImageRecord
     */
    public FacilityImageRecord() {
        super(FacilityImage.FACILITY_IMAGE);
    }

    /**
     * Create a detached, initialised FacilityImageRecord
     */
    public FacilityImageRecord(ULong fcltyImgId, String fcltyImgPath, ULong fcltyId, LocalDateTime creDtm) {
        super(FacilityImage.FACILITY_IMAGE);

        setFcltyImgId(fcltyImgId);
        setFcltyImgPath(fcltyImgPath);
        setFcltyId(fcltyId);
        setCreDtm(creDtm);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised FacilityImageRecord
     */
    public FacilityImageRecord(trash.tables.pojos.FacilityImage value) {
        super(FacilityImage.FACILITY_IMAGE);

        if (value != null) {
            setFcltyImgId(value.getFcltyImgId());
            setFcltyImgPath(value.getFcltyImgPath());
            setFcltyId(value.getFcltyId());
            setCreDtm(value.getCreDtm());
            resetChangedOnNotNull();
        }
    }
}
