name: EC2 Deploy

on:
  push:
    branches: [ "develop" ]

permissions:
  contents: read

jobs:
  paths-filtering:
    runs-on: ubuntu-latest
    outputs:
      admin: ${{ steps.filter.outputs.admin }}
      app: ${{ steps.filter.outputs.app }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            admin:
              - '!trash-app/**'
            app:
              - '!trash-admin/**'

  admin-build-and-deploy:
    runs-on: ubuntu-latest
    needs: paths-filtering
    if: ${{ needs.paths-filtering.outputs.admin == 'true' }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          submodules: true
          token: ${{ secrets.GIT_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: chmod +x gradlew && ./gradlew build -x test

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY_URI }}

      - name: Admin Docker build & push to ECR
        run: |
          docker build -t ${{ secrets.ECR_REGISTRY_URI }}:admin -f trash-admin/Dockerfile .
          docker push ${{ secrets.ECR_REGISTRY_URI }}:admin

      - name: Admin Server Deploy
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids "${{ secrets.ADMIN_EC2_INSTANCE_ID }}" \
            --parameters commands='[
              "aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY_URI }}",
              "cd /root",
              "docker stop $(docker ps -a -q)",
              "docker rm $(docker ps -aq)",
              "docker rmi $(docker images -a -q)",
              "docker pull ${{ secrets.ECR_REGISTRY_URI }}:admin",
              "docker run -d -p 8080:8080 --name spotfinder-admin ${{ secrets.ECR_REGISTRY_URI }}:admin"
            ]' \
            --comment "Deploying Docker container"
      

  app-build-and-deploy:
    runs-on: ubuntu-latest
    needs: paths-filtering
    if: ${{ needs.paths-filtering.outputs.app == 'true' }}
    steps:
      - name: checkout
        uses: actions/checkout@v3
        with:
          submodules: true
          token: ${{ secrets.GIT_TOKEN }}

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      - name: Build with Gradle
        run: chmod +x gradlew && ./gradlew build -x test

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY_URI }}

      - name: App Docker build & push to ECR
        run: docker buildx build --platform=linux/arm64 -t ${{ secrets.ECR_REGISTRY_URI }}:app -f trash-app/Dockerfile --push .

      - name: App Server Deploy
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --instance-ids "${{ secrets.APP_EC2_INSTANCE_ID }}" \
            --parameters commands='[
              "aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.ECR_REGISTRY_URI }}",
              "cd /root",
              "docker stop $(docker ps -a -q)",
              "docker rm $(docker ps -aq)",
              "docker rmi $(docker images -a -q)",
              "docker pull ${{ secrets.ECR_REGISTRY_URI }}:app",
              "docker run -d -p 8080:8080 --name spotfinder-app ${{ secrets.ECR_REGISTRY_URI }}:app"
            ]' \
            --comment "Deploying Docker container"