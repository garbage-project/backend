/*
 * This file is generated by jOOQ.
 */
package trash.tables;


import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import trash.Keys;
import trash.Spotfinder;
import trash.tables.records.FacilityImageRecord;


/**
 * 시설물 이미지 테이블
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class FacilityImage extends TableImpl<FacilityImageRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>spotfinder.FACILITY_IMAGE</code>
     */
    public static final FacilityImage FACILITY_IMAGE = new FacilityImage();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FacilityImageRecord> getRecordType() {
        return FacilityImageRecord.class;
    }

    /**
     * The column <code>spotfinder.FACILITY_IMAGE.FCLTY_IMG_ID</code>. 이미지 ID
     */
    public final TableField<FacilityImageRecord, ULong> FCLTY_IMG_ID = createField(DSL.name("FCLTY_IMG_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "이미지 ID");

    /**
     * The column <code>spotfinder.FACILITY_IMAGE.FCLTY_IMG_PATH</code>. 이미지 경로
     */
    public final TableField<FacilityImageRecord, String> FCLTY_IMG_PATH = createField(DSL.name("FCLTY_IMG_PATH"), SQLDataType.VARCHAR(255).nullable(false), this, "이미지 경로");

    /**
     * The column <code>spotfinder.FACILITY_IMAGE.FCLTY_ID</code>. 시설물 ID
     */
    public final TableField<FacilityImageRecord, ULong> FCLTY_ID = createField(DSL.name("FCLTY_ID"), SQLDataType.BIGINTUNSIGNED.nullable(false), this, "시설물 ID");

    /**
     * The column <code>spotfinder.FACILITY_IMAGE.CRE_DTM</code>. 등록일시
     */
    public final TableField<FacilityImageRecord, LocalDateTime> CRE_DTM = createField(DSL.name("CRE_DTM"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "등록일시");

    private FacilityImage(Name alias, Table<FacilityImageRecord> aliased) {
        this(alias, aliased, null);
    }

    private FacilityImage(Name alias, Table<FacilityImageRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("시설물 이미지 테이블"), TableOptions.table());
    }

    /**
     * Create an aliased <code>spotfinder.FACILITY_IMAGE</code> table reference
     */
    public FacilityImage(String alias) {
        this(DSL.name(alias), FACILITY_IMAGE);
    }

    /**
     * Create an aliased <code>spotfinder.FACILITY_IMAGE</code> table reference
     */
    public FacilityImage(Name alias) {
        this(alias, FACILITY_IMAGE);
    }

    /**
     * Create a <code>spotfinder.FACILITY_IMAGE</code> table reference
     */
    public FacilityImage() {
        this(DSL.name("FACILITY_IMAGE"), null);
    }

    public <O extends Record> FacilityImage(Table<O> child, ForeignKey<O, FacilityImageRecord> key) {
        super(child, key, FACILITY_IMAGE);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Spotfinder.SPOTFINDER;
    }

    @Override
    public Identity<FacilityImageRecord, ULong> getIdentity() {
        return (Identity<FacilityImageRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<FacilityImageRecord> getPrimaryKey() {
        return Keys.KEY_FACILITY_IMAGE_PRIMARY;
    }

    @Override
    public FacilityImage as(String alias) {
        return new FacilityImage(DSL.name(alias), this);
    }

    @Override
    public FacilityImage as(Name alias) {
        return new FacilityImage(alias, this);
    }

    @Override
    public FacilityImage as(Table<?> alias) {
        return new FacilityImage(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public FacilityImage rename(String name) {
        return new FacilityImage(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public FacilityImage rename(Name name) {
        return new FacilityImage(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public FacilityImage rename(Table<?> name) {
        return new FacilityImage(name.getQualifiedName(), null);
    }
}
