name: "Deploy to EC2"

inputs:
  DOCKER_FILE_PATH:
    required: true
  DOCKER_IMAGE_NAME:
    required: true
  ECR_REGISTRY_URI:
    required: true
  EC2_INSTANCE_ID:
    required: true

runs:
  using: "composite"
  steps:
    - name: Docker build
      run: |
        docker build -t ${{ inputs.DOCKER_IMAGE_NAME }}:latest -f ${{ inputs.DOCKER_FILE_PATH }} .

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ inputs.ECR_REGISTRY_URI }}

    - name: Publish Image to ECR
      run: |
        docker tag ${{ inputs.DOCKER_IMAGE_NAME }}:latest ${{ inputs.ECR_REGISTRY_URI }}:latest
        docker push ${{ inputs.ECR_REGISTRY_URI }}:latest

    - name: Deploy application using SSM
      run: |
        aws ssm send-command \
          --document-name "AWS-RunShellScript" \
          --instance-ids "${{ inputs.EC2_INSTANCE_ID }}" \
          --parameters commands='[
            "aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ inputs.ECR_REGISTRY_URI }}",
            "docker stop $(docker ps -a -q)",
            "docker rm $(docker ps -aq)",
            "docker rmi $(docker images -a -q)",
            "docker pull ${{ inputs.ECR_REGISTRY_URI }}:latest",
            "docker run -d -p 8080:8080 --name ${{ inputs.DOCKER_IMAGE_NAME }} ${{ inputs.ECR_REGISTRY_URI }}:latest"
          ]' \
          --comment "Deploying Docker container"