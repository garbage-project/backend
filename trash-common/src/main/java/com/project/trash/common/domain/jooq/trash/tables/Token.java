/*
 * This file is generated by jOOQ.
 */
package trash.tables;


import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import trash.Keys;
import trash.Spotfinder;
import trash.tables.records.TokenRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Token extends TableImpl<TokenRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>spotfinder.TOKEN</code>
     */
    public static final Token TOKEN = new Token();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TokenRecord> getRecordType() {
        return TokenRecord.class;
    }

    /**
     * The column <code>spotfinder.TOKEN.MBR_ID</code>. 회원 ID
     */
    public final TableField<TokenRecord, String> MBR_ID = createField(DSL.name("MBR_ID"), SQLDataType.VARCHAR(50).nullable(false), this, "회원 ID");

    /**
     * The column <code>spotfinder.TOKEN.TKN_ACS</code>. 엑세스 토큰
     */
    public final TableField<TokenRecord, String> TKN_ACS = createField(DSL.name("TKN_ACS"), SQLDataType.VARCHAR(255).nullable(false), this, "엑세스 토큰");

    /**
     * The column <code>spotfinder.TOKEN.TKN_RFRS</code>. 리프레시 토큰
     */
    public final TableField<TokenRecord, String> TKN_RFRS = createField(DSL.name("TKN_RFRS"), SQLDataType.VARCHAR(255).nullable(false), this, "리프레시 토큰");

    /**
     * The column <code>spotfinder.TOKEN.CRE_DTM</code>. 등록일시
     */
    public final TableField<TokenRecord, LocalDateTime> CRE_DTM = createField(DSL.name("CRE_DTM"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "등록일시");

    /**
     * The column <code>spotfinder.TOKEN.UPD_DTM</code>. 수정일시
     */
    public final TableField<TokenRecord, LocalDateTime> UPD_DTM = createField(DSL.name("UPD_DTM"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "수정일시");

    private Token(Name alias, Table<TokenRecord> aliased) {
        this(alias, aliased, null);
    }

    private Token(Name alias, Table<TokenRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>spotfinder.TOKEN</code> table reference
     */
    public Token(String alias) {
        this(DSL.name(alias), TOKEN);
    }

    /**
     * Create an aliased <code>spotfinder.TOKEN</code> table reference
     */
    public Token(Name alias) {
        this(alias, TOKEN);
    }

    /**
     * Create a <code>spotfinder.TOKEN</code> table reference
     */
    public Token() {
        this(DSL.name("TOKEN"), null);
    }

    public <O extends Record> Token(Table<O> child, ForeignKey<O, TokenRecord> key) {
        super(child, key, TOKEN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Spotfinder.SPOTFINDER;
    }

    @Override
    public UniqueKey<TokenRecord> getPrimaryKey() {
        return Keys.KEY_TOKEN_PRIMARY;
    }

    @Override
    public Token as(String alias) {
        return new Token(DSL.name(alias), this);
    }

    @Override
    public Token as(Name alias) {
        return new Token(alias, this);
    }

    @Override
    public Token as(Table<?> alias) {
        return new Token(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Token rename(String name) {
        return new Token(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Token rename(Name name) {
        return new Token(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Token rename(Table<?> name) {
        return new Token(name.getQualifiedName(), null);
    }
}
