/*
 * This file is generated by jOOQ.
 */
package trash.tables;


import java.math.BigDecimal;
import java.time.LocalDateTime;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.jooq.types.ULong;

import trash.Keys;
import trash.Spotfinder;
import trash.tables.records.FacilityRecord;


/**
 * 시설물 테이블
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Facility extends TableImpl<FacilityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>spotfinder.FACILITY</code>
     */
    public static final Facility FACILITY = new Facility();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FacilityRecord> getRecordType() {
        return FacilityRecord.class;
    }

    /**
     * The column <code>spotfinder.FACILITY.FCLTY_SEQ</code>. 시설물 일련번호
     */
    public final TableField<FacilityRecord, ULong> FCLTY_SEQ = createField(DSL.name("FCLTY_SEQ"), SQLDataType.BIGINTUNSIGNED.nullable(false).identity(true), this, "시설물 일련번호");

    /**
     * The column <code>spotfinder.FACILITY.FCLTY_NM</code>. 시설물명
     */
    public final TableField<FacilityRecord, String> FCLTY_NM = createField(DSL.name("FCLTY_NM"), SQLDataType.VARCHAR(50).nullable(false), this, "시설물명");

    /**
     * The column <code>spotfinder.FACILITY.FCLTY_TYP</code>. 시설물 종류
     */
    public final TableField<FacilityRecord, String> FCLTY_TYP = createField(DSL.name("FCLTY_TYP"), SQLDataType.CHAR(1).nullable(false), this, "시설물 종류");

    /**
     * The column <code>spotfinder.FACILITY.FCLTY_LCTN</code>. 위치
     */
    public final TableField<FacilityRecord, String> FCLTY_LCTN = createField(DSL.name("FCLTY_LCTN"), SQLDataType.VARCHAR(50).nullable(false), this, "위치");

    /**
     * The column <code>spotfinder.FACILITY.FCLTY_DTL_LCTN</code>. 상세 위치
     */
    public final TableField<FacilityRecord, String> FCLTY_DTL_LCTN = createField(DSL.name("FCLTY_DTL_LCTN"), SQLDataType.VARCHAR(50).nullable(false), this, "상세 위치");

    /**
     * The column <code>spotfinder.FACILITY.FCLTY_LTTD</code>. 위도
     */
    public final TableField<FacilityRecord, BigDecimal> FCLTY_LTTD = createField(DSL.name("FCLTY_LTTD"), SQLDataType.DECIMAL(12, 8).nullable(false), this, "위도");

    /**
     * The column <code>spotfinder.FACILITY.FCLTY_LNGT</code>. 경도
     */
    public final TableField<FacilityRecord, BigDecimal> FCLTY_LNGT = createField(DSL.name("FCLTY_LNGT"), SQLDataType.DECIMAL(12, 8).nullable(false), this, "경도");

    /**
     * The column <code>spotfinder.FACILITY.FCLTY_INFO</code>. 정보
     */
    public final TableField<FacilityRecord, String> FCLTY_INFO = createField(DSL.name("FCLTY_INFO"), SQLDataType.VARCHAR(255), this, "정보");

    /**
     * The column <code>spotfinder.FACILITY.FCLTY_DPR_NM</code>. 관리 부서명
     */
    public final TableField<FacilityRecord, String> FCLTY_DPR_NM = createField(DSL.name("FCLTY_DPR_NM"), SQLDataType.VARCHAR(100), this, "관리 부서명");

    /**
     * The column <code>spotfinder.FACILITY.FCLTY_DPR_TLPH_NMBR</code>. 관리 부서
     * 전화번호
     */
    public final TableField<FacilityRecord, String> FCLTY_DPR_TLPH_NMBR = createField(DSL.name("FCLTY_DPR_TLPH_NMBR"), SQLDataType.VARCHAR(30), this, "관리 부서 전화번호");

    /**
     * The column <code>spotfinder.FACILITY.FCLTY_APRV_STA</code>. 승인 상태
     */
    public final TableField<FacilityRecord, String> FCLTY_APRV_STA = createField(DSL.name("FCLTY_APRV_STA"), SQLDataType.CHAR(1).nullable(false), this, "승인 상태");

    /**
     * The column <code>spotfinder.FACILITY.MBR_ID</code>. 회원 ID
     */
    public final TableField<FacilityRecord, String> MBR_ID = createField(DSL.name("MBR_ID"), SQLDataType.VARCHAR(50), this, "회원 ID");

    /**
     * The column <code>spotfinder.FACILITY.CRE_DTM</code>. 등록일시
     */
    public final TableField<FacilityRecord, LocalDateTime> CRE_DTM = createField(DSL.name("CRE_DTM"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "등록일시");

    /**
     * The column <code>spotfinder.FACILITY.UPD_DTM</code>. 수정일시
     */
    public final TableField<FacilityRecord, LocalDateTime> UPD_DTM = createField(DSL.name("UPD_DTM"), SQLDataType.LOCALDATETIME(0).nullable(false), this, "수정일시");

    private Facility(Name alias, Table<FacilityRecord> aliased) {
        this(alias, aliased, null);
    }

    private Facility(Name alias, Table<FacilityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("시설물 테이블"), TableOptions.table());
    }

    /**
     * Create an aliased <code>spotfinder.FACILITY</code> table reference
     */
    public Facility(String alias) {
        this(DSL.name(alias), FACILITY);
    }

    /**
     * Create an aliased <code>spotfinder.FACILITY</code> table reference
     */
    public Facility(Name alias) {
        this(alias, FACILITY);
    }

    /**
     * Create a <code>spotfinder.FACILITY</code> table reference
     */
    public Facility() {
        this(DSL.name("FACILITY"), null);
    }

    public <O extends Record> Facility(Table<O> child, ForeignKey<O, FacilityRecord> key) {
        super(child, key, FACILITY);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Spotfinder.SPOTFINDER;
    }

    @Override
    public Identity<FacilityRecord, ULong> getIdentity() {
        return (Identity<FacilityRecord, ULong>) super.getIdentity();
    }

    @Override
    public UniqueKey<FacilityRecord> getPrimaryKey() {
        return Keys.KEY_FACILITY_PRIMARY;
    }

    @Override
    public Facility as(String alias) {
        return new Facility(DSL.name(alias), this);
    }

    @Override
    public Facility as(Name alias) {
        return new Facility(alias, this);
    }

    @Override
    public Facility as(Table<?> alias) {
        return new Facility(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Facility rename(String name) {
        return new Facility(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Facility rename(Name name) {
        return new Facility(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Facility rename(Table<?> name) {
        return new Facility(name.getQualifiedName(), null);
    }
}
