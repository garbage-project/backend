/*
 * This file is generated by jOOQ.
 */
package trash.tables;


import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;

import trash.Keys;
import trash.Trash;
import trash.tables.records.AdminRecord;


/**
 * 관리자 테이블
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Admin extends TableImpl<AdminRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>trash.ADMIN</code>
     */
    public static final Admin ADMIN = new Admin();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AdminRecord> getRecordType() {
        return AdminRecord.class;
    }

    /**
     * The column <code>trash.ADMIN.ADM_ID</code>. ID
     */
    public final TableField<AdminRecord, String> ADM_ID = createField(DSL.name("ADM_ID"), SQLDataType.VARCHAR(20).nullable(false), this, "ID");

    /**
     * The column <code>trash.ADMIN.ADM_PWD</code>. 비밀번호
     */
    public final TableField<AdminRecord, String> ADM_PWD = createField(DSL.name("ADM_PWD"), SQLDataType.VARCHAR(100).nullable(false), this, "비밀번호");

    private Admin(Name alias, Table<AdminRecord> aliased) {
        this(alias, aliased, null);
    }

    private Admin(Name alias, Table<AdminRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment("관리자 테이블"), TableOptions.table());
    }

    /**
     * Create an aliased <code>trash.ADMIN</code> table reference
     */
    public Admin(String alias) {
        this(DSL.name(alias), ADMIN);
    }

    /**
     * Create an aliased <code>trash.ADMIN</code> table reference
     */
    public Admin(Name alias) {
        this(alias, ADMIN);
    }

    /**
     * Create a <code>trash.ADMIN</code> table reference
     */
    public Admin() {
        this(DSL.name("ADMIN"), null);
    }

    public <O extends Record> Admin(Table<O> child, ForeignKey<O, AdminRecord> key) {
        super(child, key, ADMIN);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Trash.TRASH;
    }

    @Override
    public UniqueKey<AdminRecord> getPrimaryKey() {
        return Keys.KEY_ADMIN_PRIMARY;
    }

    @Override
    public Admin as(String alias) {
        return new Admin(DSL.name(alias), this);
    }

    @Override
    public Admin as(Name alias) {
        return new Admin(alias, this);
    }

    @Override
    public Admin as(Table<?> alias) {
        return new Admin(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Admin rename(String name) {
        return new Admin(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Admin rename(Name name) {
        return new Admin(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Admin rename(Table<?> name) {
        return new Admin(name.getQualifiedName(), null);
    }
}
